#include <unistd.h>

unsigned char reverse_bits(unsigned char octet)
{
    unsigned char result = 0;
    int i = 0;

    while (i < 8)
    {
        result = (result << 1) | (octet & 1);
        octet >>= 1;
        i++;
    }
    return (result);
}

void print_bits(unsigned char octet)
{
    int i = 7;
    while (i >= 0)
    {
        if (octet & (1 << i))
            write(1, "1", 1);
        else
            write(1, "0", 1);
        i--;
    }
}

int main(int argc, char **argv)
{
    if (argc != 2)
    {
        write(1, "\n", 1);
        return 0;
    }

    // Convert first character of input to byte
    unsigned char input = (unsigned char)argv[1][0];
    unsigned char reversed = reverse_bits(input);

    // Print original and reversed bits
    write(1, "Original: ", 10);
    print_bits(input);
    write(1, "\nReversed: ", 11);
    print_bits(reversed);
    write(1, "\n", 1);

    return 0;
}
